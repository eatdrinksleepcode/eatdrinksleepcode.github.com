<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eat, Drink, Sleep, Code!]]></title>
  <link href="http://eatdrinksleepcode.net/atom.xml" rel="self"/>
  <link href="http://eatdrinksleepcode.net/"/>
  <updated>2013-01-21T02:54:37-06:00</updated>
  <id>http://eatdrinksleepcode.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Locksmith]]></title>
    <link href="http://eatdrinksleepcode.net/blog/introducing-locksmith/"/>
    <updated>2013-01-14T00:00:00-06:00</updated>
    <id>http://eatdrinksleepcode.net/blog/introducing-locksmith</id>
    <content type="html"><![CDATA[<h2>What if you could mock (almost) anything in .NET?</h2>

<h3>Introducing Locksmith for the .NET framework</h3>

<p>Mocking libraries have dramatically simplified the process of unit testing dependency injected code. But although a number of good mocking libraries exist for the .NET framework, they are handicapped in a way that their counterparts in Java are not. Most mocking libraries work by dynamically generating a subclass of the type being mocked, and overriding its methods to return values (or take other actions) as specified in the test. However, in .NET most methods are not virtual and cannot be overridden. This <a href="http://www.artima.com/intv/nonvirtual.html">policy</a> of <a href="http://www.artima.com/forums/flat.jsp?forum=106&amp;thread=14374">non-virtual</a> by <a href="http://neverindoubtnet.blogspot.com/2009/08/do-not-make-every-method-virtual.html">default</a> has been <a href="http://ayende.com/blog/4126/virtually-everything">hotly</a> <a href="http://programmers.stackexchange.com/questions/144574/should-all-public-methods-in-an-abstract-class-be-marked-virtual">debated</a>, and will undoubtedly continue to be debated for some time to come. But with Locksmith, sealed classes and non-virtual methods are not a barrier to mocking dependencies in your test code.</p>

<p>By rewriting assemblies as they are loaded by the CLR, Locksmith lets you treat all visible instance methods and properties in <a href="#catch">almost</a> all loaded assemblies as virtual. That means that you can use your favorite mocking library to mock what is normally a non-virtual method, and it will just work. And it doesn&#8217;t just work on your own code; non-virtual methods in other libraries, including the BCL, can be mocked with Locksmith. A few lines of code before any of your test code is executed are all that is required. For example, if you are using NUnit as your testing framework:</p>

<figure class='code'><figcaption><span>Using Locksmith with NUnit (C#)</span><a href='https://bitbucket.org/eatdrinksleepcode/locksmith/wiki/Using%20EagerKey%20with%20NUnit'>Wiki Page</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[SetUpFixture]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">SetUpTearDown</span> <span class="p">:</span> <span class="n">IDisposable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">Key</span> <span class="n">key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="na">    [SetUp]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">SetUp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">key</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Key</span><span class="p">();</span>
</span><span class='line'>        <span class="n">key</span><span class="p">.</span><span class="n">StartUnlocking</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">null</span> <span class="p">!=</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">key</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can create a mock of <a href="#catch">almost</a> any type, for example the previously unmockable HttpRequest:</p>

<figure class='code'><figcaption><span>Mocking a non-virtual method with Moq (C#)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c#'><span class='line'><span class="na">[TestFixture]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Tests</span> <span class="p">{</span>
</span><span class='line'><span class="na">    [Test]</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">ReturnKnownValueFromAcceptTypes</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Castle</span><span class="p">.</span><span class="n">DynamicProxy</span><span class="p">.</span><span class="n">Generators</span><span class="p">.</span><span class="n">AttributesToAvoidReplicating</span><span class="p">.</span><span class="n">Add</span><span class="p">&lt;</span><span class="n">AspNetHostingPermissionAttribute</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">mock</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&lt;</span><span class="n">HttpRequest</span><span class="p">&gt;(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;http://eatdrinksleepcode.net&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">mock</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">request</span> <span class="p">=&gt;</span> <span class="n">request</span><span class="p">.</span><span class="n">AcceptTypes</span><span class="p">).</span><span class="n">Returns</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span><span class="s">&quot;html&quot;</span><span class="p">});</span>
</span><span class='line'>        <span class="n">CollectionAssert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span><span class="s">&quot;html&quot;</span><span class="p">},</span> <span class="n">mock</span><span class="p">.</span><span class="n">AcceptTypes</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a id="catch"></a>* The catch is that because Locksmith rewrites assemblies at runtime, it cannot unlock any assembly that is loaded before the Key starts watching. That means that types from mscorlib cannot be unlocked, because mscorlib will always be loaded before Locksmith; nor can types from any assembly loaded by the unit testing framework. In the case of NUnit, that includes System, System.Configuration, and System.Xml.</p>

<p>Note that the test code does not have any reference to Locksmith. It simply mocks HttpRequest as if it were unsealed (because it is) and mocks the return value of the AcceptTypes property as if it were virtual (because it is). As a result, .NET developers can write test code that injects dependencies without having to worry about whether the dependency is &#8220;mockable&#8221;: when the test executes, it will be. Additional interfaces and unnecessarily virtual methods are no longer required.</p>

<p>To get started using Locksmith, visit the <a href="https://bitbucket.org/eatdrinksleepcode/locksmith">project page</a>, or install the <a href="http://nuget.org/packages/Locksmith">Nuget package</a> and jump right in. If you find a bug or have a suggestion, please <a href="Issue%20tracker">submit it</a>; or better yet, <a href="https://bitbucket.org/eatdrinksleepcode/locksmith/fork">fork the project</a>, write some code, and submit a <a href="https://bitbucket.org/eatdrinksleepcode/locksmith/pull-request/new">pull request</a>.</p>
]]></content>
  </entry>
  
</feed>
